#!/bin/sh
#
####################################################
# This file is part of RPBPBR
#
# Author:
#   Xi Wang, xi dot wang at dkfz dot de
####################################################
#

err()
{
  echo "$@" >&2
}

exe_file()
{
  if which $@ 2>/dev/null 1>&2; then 
    err "[$@]: `which $@`" 
  else 
    err "ERROR: $@ cannot be found!" 
    exit 1;
  fi
}

location() 
{
  TF=$@
  while [ -L "$TF" ] ; do
    TF=`readlink $TF`
  done
  CUR=`pwd`
  cd `dirname $TF`
  TF=`basename $TF`
  DIR=`pwd -P`
  cd $CUR
  FULL=$DIR/$TF
  echo $FULL
}

if (( $# < 3 )); then
  err "USAGE: $0 <input.fasta/fastq> <out_prefix> <type:fasta/fastq> [keep temp]"
  exit 1;
fi

if [ ! -r $1 ]; then
  err "ERROR: infile $1 doesn't exist or cannot read" 
  err "USAGE: $0 <input.fasta/fastq> <out_prefix> <type:fasta/fastq> [keep temp]"
  exit 1;
fi
if [ -e $2 ]; then
  err "ERROR: file with name $2 exists, please specify another out_prefix name!" 
  err "USAGE: $0 <input.fasta/fastq> <out_prefix> <type:fasta/fastq> [keep temp]"
  exit 1;
fi
if [ "$3" != "fasta" ] && [ "$3" != "fastq" ] ; then
  err "ERROR: type shoud be fasta or fastq!"
  err "USAGE: $0 <input.fasta/fastq> <out_prefix> <type:fasta/fastq> [keep temp]"
  exit 1;
fi

INFILE=$1
OUTPRE=$2
TYPE=$3
KEEPTMP=0
if (( $# == 4 )); then    
  KEEPTMP=1 
fi

if [ `uname` = 'Darwin' ]; then
  FILE=`location $0`
else
  FILE=`readlink -f $0`
fi

BIN=`dirname $FILE`
DATA=$BIN/../data/
PATH=$BIN:$PATH
THREAD=4

exe_file bowtie2 
exe_file bowtie2-build 
exe_file samtools  
exe_file adapter_check_trim.pl
exe_file parse_seg_map.pl

### analysis in temp dir
mkdir ${OUTPRE}
cd ${OUTPRE}

if [ $TYPE = "fasta" ] ; then
  cp ../$INFILE ${OUTPRE}.145_remain.fa
else
  awk '{if(NR%4==1){sub("@",">",$1); print } if(NR%4==2){print }}' ../$INFILE > ${OUTPRE}.145_remain.fa
fi

echo "STEP 1: 5'/3' end trimming..."

for i in 140 135 130 125 120 115 110 105 100 95 90 85 80 75 70 65 60 55 50 45 40 35 30; do

  j=`expr $i + 5`
  bowtie2-build -q ${OUTPRE}.${j}_remain.fa ${OUTPRE}.${j}_remain

  bowtie2 -f --very-sensitive --score-min L,-1.6,-1.6 --mp 5 --rdg 4,2 --rfg 4,2 -a -p $THREAD -x ${OUTPRE}.${j}_remain -U $DATA/adapters_${i}.fa 2>/dev/null | samtools view -Sb - > ${OUTPRE}_adapter_${i}.bam 2>/dev/null
  samtools view ${OUTPRE}_adapter_${i}.bam | adapter_check_trim.pl ${OUTPRE}.${j}_remain.fa /dev/stdin ${OUTPRE}_adapter_${i}_clean.fa ${OUTPRE}.${i}_remain.fa > ${OUTPRE}_adapter_${i}.adapter_check_trim.info
done

echo "STEP 2: segment mapping..."

cat ${OUTPRE}_adapter_*_clean.fa > ${OUTPRE}_clean.fa
bowtie2-build -q ${OUTPRE}_clean.fa ${OUTPRE}_clean
bowtie2 -f --very-sensitive --score-min L,-1.6,-1.6 --mp 5 --rdg 4,2 --rfg 4,2 -a -p $THREAD -x ${OUTPRE}_clean -U $DATA/segements.fa 2>/dev/null | samtools view -Sb - > ${OUTPRE}_clean.segements.bam 2>/dev/null

echo "STEP 3: barcode assembly..."

samtools view -F 4 -h ${OUTPRE}_clean.segements.bam | parse_seg_map.pl /dev/stdin ${OUTPRE}.seg_assemble.txt
grep '>' ${OUTPRE}.145_remain.fa | wc -l > ${OUTPRE}.stat
grep '>' ${OUTPRE}_clean.fa | wc -l >> ${OUTPRE}.stat
cut -f2 ${OUTPRE}.seg_assemble.txt | sort | uniq -c | awk -v OFS='\t' '{print $1,$2}' | sort -k1,1nr >> ${OUTPRE}.stat
awk -v OFS='\t' '{if(NR==1){print "total",$1} if(NR==2) {print "intact",$1} if(NR>2) {print $2,$1}}' ${OUTPRE}.stat > ../${OUTPRE}.barcode.count.tsv

### rm temp dir by default
if (( $KEEPTMP == 0 )); then 
  cd ..
  rm -fr $OUTPRE
fi

echo "DONE."
